#!/bin/ash

_mnt_overlayfs() {
    local src="${1}"
    local newroot="${2}"

    mkdir -p /run/pep/cowspace/upper/upperdir /run/pep/cowspace/upper/workdir

    if ! mount -t overlay -o \
    "lowerdir=${src},upperdir=/run/pep/cowspace/upper/upperdir,workdir=/run/pep/cowspace/upper/workdir,nfs_export=off,index=off,noatime" \
    airootfs "${newroot}/"; then
        echo "Failed to mount overlayfs, you are now being dropped into an emergency shell."
        launch_interactive_shell
    fi
}

_mnt_base() {
    local src="${1}"
    mkdir -p /run/pep/cowspace/upper

    if ! mount "${src}" /run/pep/cowspace/upper; then
        echo "Failed to mount local drive as the upper overlay"
        launch_interactive_shell
        msg "Trying to continue (this will most likely fail) ..."
    fi
}

_mnt_sfs() {
    local img="${1}"
    local mnt="${2}"

    mkdir -p "${mnt}"

    if ! mount -t squashfs -o ro,loop "${img}" "${mnt}" ; then
        echo "ERROR: while mounting '${img}' to '${mnt}'"
        launch_interactive_shell
    fi
}

_mnt_dev() {
    local dev="${1}"
    local mnt="${2}"

    mkdir -p "${mnt}"

    msg ":: Mounting '${dev}' to '${mnt}'"

    while ! poll_device "${dev}" 30; do
        echo "ERROR: '${dev}' device did not show up after 30 seconds..."
        echo "   Falling back to interactive prompt"
        echo "   You can try to fix the problem manually, log out when you are finished"
        launch_interactive_shell
    done

    if mount "${dev}" "${mnt}"; then
        msg ":: Device '${dev}' mounted successfully."
    else
        echo "ERROR: Failed to mount '${dev}'"
        echo "   Falling back to interactive prompt"
        echo "   You can try to fix the problem manually, log out when you are finished"
        launch_interactive_shell
    fi
}

_update_root() {
    local newroot="/run/pep/bootmnt/newroot.img"
    local rootimg="${1}"

    if [[ -f "${newroot}" ]]; then
        cp "${newroot}" "${rootimg}"
        rm -f "${newroot}"
        msg ":: Using update root image"
    else
        msg ":: No update necessary"
    fi
}

_check_recovery_usb() {
    local usb_drives="$(readlink -f /dev/disk/by-id/usb*)"
    local mount_point="/run/pep/recovery"
    if [[ $( $usb_drives | wc -l) -ge 1 ]] ; then
        local drive_name = "$($usb_drives | head -n 2 | tail -1)"
        mkdir -p $mount_point
        if ! mount -t vfat $drive_name $mount_point ; then
            return
        fi

        if [[ -f "${mount_point}/jstor-update.tgz" ]] ; then
            if /usr/bin/jstorsig verify "${mount_point}/jstor-update.tgz" sigkey.priv.pub ; then
                mkdir -p "${mount_point}/update"
                tar -C "${mount_point}/update" "${mount_point}/jstor-update.tgz"
                cp "${mount_point}/update/root.img /run/pep/bootmnt/newroot.img"
                _mnt_dev "/dev/sda1" "/mnt"
                cp "${mount_point}/update/{init*,vmlinuz-linux}" /mnt/
                umount /mnt
                shutdown -h now
            fi
        fi
    fi
}

run_hook() {
    export mount_handler="jstor_mount_handler"
}

jstor_mount_handler() {
    local newroot="${1}"
    local rootimg="/run/pep/bootmnt/root.img"
    local rootfs="/run/pep/bootmnt/filesystem.squashfs"

    msg ":: Mounting boot device"
    _mnt_dev "/dev/sdb1" "/run/pep/bootmnt"

    msg ":: Checking for recovery drive"
    _check_recovery_usb

    _update_root "${rootimg}"

    _mnt_sfs ${rootimg} ${rootfs}

    _mnt_dev "/dev/sda2" "/run/pep/cowspace/upper"

    _mnt_overlayfs "${rootfs}" "${newroot}"

    umount -d /run/pep/bootmnt
}